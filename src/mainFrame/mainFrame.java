/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mainFrame;

import java.awt.Component;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.DefaultListModel;
import java.io.BufferedReader;
import java.io.File;
//import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
//import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.text.DefaultCaret;
//import java.lang.Object;



/**
 *
 * @author Akandesh
 */
public class mainFrame extends javax.swing.JFrame {
        String Channel1;
        String StreamLink;
        String tempStreamURL;
        boolean lFavSelected;
        boolean lHistorySelect;
        boolean chatCheck;
    /**
     * Creates new form mainFrame
     */
    public mainFrame() {
        
        initComponents();
        setIcon();
      event e = new event();
      checkChat.addItemListener(e);
      
    //Load Favorites.ser
    /////////////////////////////////////////////////////////////////////////
    
    lstFav.setModel(lFavorites);
    String filename = "Favorites.ser";
    FileInputStream fis = null;
    ObjectInputStream in = null;
    try
    {
        fis = new FileInputStream(filename);
        in = new ObjectInputStream(fis);
        lFavorites = (DefaultListModel) in.readObject();
        in.close();
        jScrollPane1.setViewportView(lstFav);
  
        }
        catch(IOException ex)
        {
        ex.printStackTrace();
        }catch(Exception ex)
        {
            System.out.println(ex.getClass());
        }


    
    lstFav.setModel(lFavorites);

    lstFav.clearSelection();
    ////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////
    

    }
      public class event implements ItemListener {
          @Override
          public void itemStateChanged(ItemEvent e){
              chatCheck = checkChat.isSelected();
          }
      }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        comboQuality = new javax.swing.JComboBox();
        btnChat = new javax.swing.JButton();
        checkChat = new javax.swing.JCheckBox();
        txtFChannelName = new javax.swing.JTextField();
        scrollHistory = new javax.swing.JScrollPane();
        lstHistory = new javax.swing.JList();
        scrollConsole = new javax.swing.JScrollPane();
        txtKonsoll = new javax.swing.JTextArea();
        strmSources = new javax.swing.JComboBox();
        btnRun = new javax.swing.JButton();
        btnAddFavorites = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstFav = new javax.swing.JList();
        btnDelete = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        lblPic = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Livestreamer Tool v2 by Akandesh");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(400, 390));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        comboQuality.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        comboQuality.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Best", "High", "Medium", "Low", "Mobile" }));
        comboQuality.setToolTipText("Choose which quality to be streamed in.");
        comboQuality.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.add(comboQuality, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 104, 30));

        btnChat.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btnChat.setText("Open chat");
        btnChat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChatActionPerformed(evt);
            }
        });
        jPanel1.add(btnChat, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 310, 159, 35));

        checkChat.setBackground(new java.awt.Color(102, 102, 102));
        checkChat.setForeground(new java.awt.Color(255, 255, 255));
        checkChat.setText("Open chat");
        checkChat.setToolTipText("Opens chat in your default browser.");
        checkChat.setFocusable(false);
        checkChat.setOpaque(false);
        jPanel1.add(checkChat, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 100, -1));

        txtFChannelName.setBackground(new java.awt.Color(255, 255, 255));
        txtFChannelName.setForeground(new java.awt.Color(255,255,255));
        txtFChannelName.setCaretColor(new java.awt.Color(255,255,255));
        txtFChannelName.setToolTipText("Enter channel name or URL.");
        txtFChannelName.setOpaque(false);
        txtFChannelName.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtFChannelNameCaretUpdate(evt);
            }
        });
        jPanel1.add(txtFChannelName, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 140, 221, 30));

        scrollHistory.setBackground(new java.awt.Color(255, 255, 255));
        scrollHistory.setForeground(new java.awt.Color(255, 255, 255));
        scrollHistory.setOpaque(false);

        lstHistory.setBackground(new java.awt.Color(153, 153, 153));
        lstHistory.setForeground(new java.awt.Color(204, 204, 204));
        lstHistory.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstHistory.setCellRenderer(new TransparentListCellRenderer());
        lstHistory.setOpaque(false);
        scrollHistory.setViewportView(lstHistory);

        jPanel1.add(scrollHistory, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 30, 159, 94));
        scrollHistory.getViewport().setOpaque(false);

        scrollConsole.setMaximumSize(null);
        scrollConsole.setMinimumSize(null);
        scrollConsole.setOpaque(false);

        txtKonsoll.setEditable(false);
        txtKonsoll.setBackground(new java.awt.Color(102, 102, 102));
        txtKonsoll.setColumns(20);
        txtKonsoll.setFont(new java.awt.Font("NSimSun", 0, 12)); // NOI18N
        txtKonsoll.setForeground(new java.awt.Color(255, 255, 255));
        txtKonsoll.setRows(5);
        txtKonsoll.setText("\n");
        txtKonsoll.setFocusable(false);
        txtKonsoll.setOpaque(false);
        txtKonsoll.setText("");
        scrollConsole.setViewportView(txtKonsoll);
        scrollConsole.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        scrollConsole.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);

        DefaultCaret caret = (DefaultCaret)txtKonsoll.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        jPanel1.add(scrollConsole, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 360, 465, 40));
        scrollConsole.getViewport().setOpaque(false);

        strmSources.setBackground(new java.awt.Color(153, 153, 153));
        strmSources.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        strmSources.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Twitch", "MLG", "Hitbox", "Azubu", "URL" }));
        strmSources.setToolTipText("Choose which service you want.");
        strmSources.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strmSourcesActionPerformed(evt);
            }
        });
        strmSources.setSelectedIndex(0);
        jPanel1.add(strmSources, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 150, 37));

        btnRun.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btnRun.setText("Launch");
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });
        jPanel1.add(btnRun, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 104, 30));

        btnAddFavorites.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btnAddFavorites.setText("Add to Favorites");
        btnAddFavorites.setEnabled(false);
        btnAddFavorites.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFavoritesActionPerformed(evt);
            }
        });
        jPanel1.add(btnAddFavorites, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 130, 37));

        jScrollPane1.setForeground(new java.awt.Color(102, 102, 102));
        jScrollPane1.setOpaque(false);

        lstFav.setBackground(new java.awt.Color(142, 142, 142));
        lstFav.setForeground(new java.awt.Color(255,255,255));
        lstFav.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 12)); // NOI18N
        lstFav.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstFav.setCellRenderer(new TransparentListCellRenderer());
        lstFav.setFocusable(false);
        lstFav.setOpaque(false);
        jScrollPane1.setViewportView(lstFav);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 465, 180));
        jScrollPane1.getViewport().setOpaque(false);

        btnDelete.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel1.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 140, 104, 30));

        btnExit.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        jPanel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 360, 159, 35));

        lblPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mainFrame/back680x407.png"))); // NOI18N
        jPanel1.add(lblPic, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 410));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        lstFav.setModel(lFavorites);
        String filename = "Favorites.ser";
        FileInputStream fis = null;
        ObjectInputStream in = null;
        try
        {
            fis = new FileInputStream(filename);
            in = new ObjectInputStream(fis);
            lFavorites = (DefaultListModel) in.readObject();
            in.close();
            jScrollPane1.setViewportView(lstFav);

        }
        catch(IOException ex)
        {
            ex.printStackTrace();
        }catch(Exception ex)
        {
            System.out.println(ex.getClass());
        }

        lstFav.setModel(lFavorites);

        lstFav.clearSelection();

        pack();
    }// </editor-fold>//GEN-END:initComponents
    DefaultListModel lFavorites=new DefaultListModel();
    DefaultListModel lHistory = new DefaultListModel();
    
    



      public class ProBuilderRun extends Thread 
    {
        public void run(){
        String StreamURL;
        String stQuality = "best";
        String jStream = (String)strmSources.getSelectedItem();
        String jQual = (String)comboQuality.getSelectedItem();
        
            switch (jQual){
                case "Best":
                stQuality = "best";
                break;
                case "High":
                stQuality = "high";
                break;
                case "Medium":
                stQuality = "medium";
                break;
                case "Low":
                stQuality = "low";
                break;
                case "Mobile":
                stQuality = "mobile";
                break;
            }
        
            switch (jStream) {
            case "Twitch":
            StreamURL = "twitch.tv/";
            tempStreamURL="twitch.tv/";
            break;
            case "MLG":
            StreamURL = "tv.majorleaguegaming.com/channel/";
            tempStreamURL ="tv.majorleaguegaming.com/channel/";
            break;
            case "Hitbox":
            StreamURL = "hitbox.tv/";
            tempStreamURL ="hitbox.tv/";
            break;
            case "Azubu":
            StreamURL = "azubu.tv/";
            tempStreamURL="azubu.tv/";
            break;
            default:
            StreamURL = "";
            tempStreamURL="";
            break;
        }
        
            
            lHistory.addElement(StreamURL+StreamLink);
            txtFChannelName.setText("");
            
            
        try {
            
                //Creates a array of strings under "command" which contains all these
                
                String[] command = {"CMD", "/C", "livestreamer --http-header Client-ID=jzkbprff40iqj646a697cyrvl0zt2m6",  StreamURL +StreamLink , stQuality};
                //Creates a new processbuilder called probuilder and runs all the commands in it
                ProcessBuilder probuilder = new ProcessBuilder( command );
                //You can set up your work directory
                probuilder.directory(new File("c:\\windows\\System32\\"));
                 Process process = probuilder.start();
                 
                   //Read out dir output
                  InputStream is = process.getInputStream();
                  InputStreamReader isr = new InputStreamReader(is);
                  BufferedReader br = new BufferedReader(isr);
                  System.out.printf("Output of running %s is:\n",
                  Arrays.toString(command));
                  String line;
                  while ((line = br.readLine()) != null) {
                      txtKonsoll.append(line+"\n");
                  }

                     
                
                /* //Wait to get exit value
                 try {
                        int exitValue = process.waitFor();
                       System.out.println("\n\nExit Value is " + exitValue);
                   } catch (InterruptedException e) {
                    }*/

             } catch (IOException ex) {
                 Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
              
             }
        // }
        
        
        

        }
    }   
    

      
      

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
       
        
        lstFav.getModel();
        int SelectedIndex = lstFav.getSelectedIndex();
        //If something is selected then remove it.
        if (SelectedIndex !=-1)
        {
        lFavorites.remove(SelectedIndex);
        }
        //savelist
        lSave();
       

    }//GEN-LAST:event_btnDeleteActionPerformed
    //Save method which saves the favorites list
    private void lSave (){
            
      try
      {
         FileOutputStream fileOut = new FileOutputStream("Favorites.ser");
         ObjectOutputStream out = new ObjectOutputStream(fileOut);
         //out.writeObject(jList1); //JList
         out.writeObject(lFavorites); //DefaultListModel
         out.close();
         fileOut.close();
         System.out.println("List is saved.");
         //System.out.println(lFavorites);
      }catch(IOException i)
      {
          i.printStackTrace();
      }
      
      
  
    }
    

            
    private void btnAddFavoritesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFavoritesActionPerformed
        // Add to favorites button
        

        String StreamURL;
        Channel1 = txtFChannelName.getText();
        String channelInsert = txtFChannelName.getText();
        channelInsert = channelInsert.toLowerCase();
        lstFav.setModel(lFavorites);
        channelInsert = channelInsert.replace(" ", "");

        //Change StreamURL depending on what is chosen in the combobox.
        txtFChannelName.setText("");
        String jStream = (String)strmSources.getSelectedItem();
        strmSources.getSelectedIndex();
        switch (jStream) {
            case "Twitch":
            StreamURL = "twitch.tv/";
            break;
            case "MLG":
            StreamURL = "tv.majorleaguegaming.com/channel/";
            break;
            case "Hitbox":
            StreamURL = "hitbox.tv/";
            break;
            case "Azubu":
            StreamURL = "azubu.tv/";
            break;
            default:
            StreamURL = "";
            break;
        }
        //Adds the channel to the favoriteslist
        lFavorites.addElement(StreamURL+channelInsert);
        

        lSave();

        
    }//GEN-LAST:event_btnAddFavoritesActionPerformed

    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed
            //StreamURL for chat function only. Maybe a stupid move
        
            String StreamURL;
            String jStream = (String)strmSources.getSelectedItem();
        
        
            switch (jStream) {
            case "Twitch":
            StreamURL = "twitch.tv/";
            tempStreamURL="twitch.tv/";
            break;
            case "MLG":
            StreamURL = "tv.majorleaguegaming.com/channel/";
            tempStreamURL ="tv.majorleaguegaming.com/channel/";
            break;
            case "Hitbox":
            StreamURL = "hitbox.tv/";
            tempStreamURL ="hitbox.tv/";
            break;
            case "Azubu":
            StreamURL = "azubu.tv/";
            tempStreamURL="azubu.tv/";
            break;
            default:
            StreamURL = "";
            tempStreamURL="";
            break;
        }
        
        
        
        
        int tempListSave = lstFav.getSelectedIndex();
        lHistorySelect = lstHistory.isSelectionEmpty();
        lFavSelected = lstFav.isSelectionEmpty();

        if (lFavSelected==false){
        String SelectedList =(String)lstFav.getSelectedValue();
        txtFChannelName.setText(SelectedList);
        strmSources.setSelectedIndex(4);
        btnAddFavorites.setEnabled(false);
        }
        if (lHistorySelect==false) {
        String SelectedList =(String)lstHistory.getSelectedValue();
        txtFChannelName.setText(SelectedList);
        strmSources.setSelectedIndex(4);
        }
        

        
        Channel1 = txtFChannelName.getText();
        
        
        
        lstHistory.setModel(lHistory);
        //String jStream = (String)jStreamCombo.getSelectedItem();
        strmSources.getSelectedIndex();

        //System.out.println(jStream);
        StreamLink = txtFChannelName.getText();
        StreamLink = StreamLink.toLowerCase();
        StreamLink = StreamLink.replace(" ", "");
        //System.out.println("Utskiften är '"+StreamLink+"'");
        // if URL isn't selected and nothing is entered in the textbox.
        if ((StreamLink.isEmpty() || StreamLink == null )){
            JOptionPane.showMessageDialog(null,"You have not entered anything.","Error",JOptionPane.ERROR_MESSAGE);
            txtFChannelName.setText("");
        // Run the lRunIt function.   
        }else if (StreamLink.contains(" ")){
            JOptionPane.showMessageDialog(null,"Your input cannot contain spaces.","Error",JOptionPane.ERROR_MESSAGE);
            txtFChannelName.setText("");
        }
        
        else{
            
            //CHAT WINDOW
            if (chatCheck == true){
                
                //false???
                if (StreamURL.contains("twitch")){
                    if (strmSources.getSelectedIndex()==4){
                        StreamURL = "";
                    }
                Desktop d = Desktop.getDesktop();
                    //if (StreamURL.contains("twitch.tv/")){
                        StreamURL = StreamURL.replace("www.twitch.tv/", "");
                    //}
            //Opens the chat window in your default browser, only works with twitch atm.
                     try {
                        d.browse(new URI ("www."+StreamURL+StreamLink+"/chat/"));
                        } catch (IOException | URISyntaxException ex) {
                        Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
            //Error message
            }else {
                    JOptionPane.showMessageDialog(null,"Chat only works with Twitch.tv at the moment.","Error",JOptionPane.ERROR_MESSAGE);
                }
            }
        
         /*if (tempStreamURL.contains("twitch.tv/")){
         String tempName = tempStreamURL.replace("twitch.tv/", "");
         }*/
            
            
            
            ProBuilderRun run = new ProBuilderRun();
            run.start();
            lstFav.setSelectedIndex(tempListSave);
            
        
         
        //System.out.println(tempListSave);
        
        }
    }//GEN-LAST:event_btnRunActionPerformed
  

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
    
    lSave();
    System.exit(0);
        
    }//GEN-LAST:event_btnExitActionPerformed

    private void txtFChannelNameCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtFChannelNameCaretUpdate
        // TODO add your handling code here:
        String CaretUpdate = txtFChannelName.getText();
        if (CaretUpdate.equals ("")){
            btnAddFavorites.setEnabled(false);
        }
        else {
            btnRun.setEnabled(true);
            btnAddFavorites.setEnabled(true);
            lstFav.clearSelection();
            lstHistory.clearSelection();
        }

    }//GEN-LAST:event_txtFChannelNameCaretUpdate

    private void btnChatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChatActionPerformed
        String StreamURL;
        StreamURL = "twitch.tv/";
        /////////////////////////////////////////////////////
        lHistorySelect = lstHistory.isSelectionEmpty();
        lFavSelected = lstFav.isSelectionEmpty();
        
        if (lFavSelected==false){
        String SelectedList =(String)lstFav.getSelectedValue();
        txtFChannelName.setText(SelectedList);
        strmSources.setSelectedIndex(4);
        btnAddFavorites.setEnabled(false);
            System.out.println("favorites");
        }
        if (lHistorySelect==false) {
        String SelectedList =(String)lstHistory.getSelectedValue();
        txtFChannelName.setText(SelectedList);
        strmSources.setSelectedIndex(4);
            System.out.println("history");
        }
        /////////////////////////////////////////////////////

         

        //////////////////////////////////////////////////////
        //String SelectedList =(String)lstFav.getSelectedValue();
        //txtFChannelName.setText(SelectedList);
        StreamLink = txtFChannelName.getText();

        //strmSources.setSelectedIndex(4);
        //btnAddFavorites.setEnabled(false);

        
            if (StreamURL.contains("twitch")){
                if (strmSources.getSelectedIndex()==4){
                        StreamURL = "";
                }
                Desktop d = Desktop.getDesktop();
                    //if (StreamURL.contains("twitch.tv/")){
                    //StreamURL = StreamURL.replace("twitch.tv/", "");
                    //}
            //Opens the chat window in your default browser, only works with twitch atm.
                     try {
                        d.browse(new URI ("www."+StreamURL+StreamLink+"/chat/"));
                        } catch (IOException | URISyntaxException ex) {
                        Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
            //Error message
            }else {
                    JOptionPane.showMessageDialog(null,"Chat only works with Twitch.tv at the moment.","Error",JOptionPane.ERROR_MESSAGE);
                }
        txtFChannelName.setText("");
    }//GEN-LAST:event_btnChatActionPerformed

    private void strmSourcesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strmSourcesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_strmSourcesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void  main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
                //UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.HiFiLookAndFeel");
            
            
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new mainFrame().setVisible(true);
            }
        });
        
    }
    public class TransparentListCellRenderer extends DefaultListCellRenderer {

    @Override
    public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
        super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        setOpaque(isSelected);
        return this;
    }

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddFavorites;
    private javax.swing.JButton btnChat;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRun;
    private javax.swing.JCheckBox checkChat;
    private javax.swing.JComboBox comboQuality;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPic;
    private javax.swing.JList lstFav;
    private javax.swing.JList lstHistory;
    private javax.swing.JScrollPane scrollConsole;
    private javax.swing.JScrollPane scrollHistory;
    private javax.swing.JComboBox strmSources;
    private javax.swing.JTextField txtFChannelName;
    private javax.swing.JTextArea txtKonsoll;
    // End of variables declaration//GEN-END:variables

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icon.png")));
    }
}
